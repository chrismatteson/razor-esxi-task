# Thanks to William Lam for being the guru
accepteula
rootpw --iscrypted <%=
  root_password = node.metadata['root_password'] || node.root_password
  if root_password =~ /^\$\d+\$[^$]*\$/
    root_password
  else
    require 'unix_crypt'
    # @todo danielp 2013-11-07: if ESXi supports a stronger algorithm, we
    # should probably upgrade to using it in preference to MD5.  SHA512 is
    # current state-of-the-art practice, elsewhere.
    UnixCrypt::MD5.build(root_password)
  end
%>
clearpart --firstdisk --overwritevmfs
install --firstdisk --overwritevmfs
# Set the network to DHCP on the first network adapater
# @todo danielp 2013-10-11: this needs to support static mode too...
network --bootproto=dhcp --device=vmnic0
reboot

# %include /tmp/networkconfig
%pre --interpreter=busybox
wget <%= stage_done_url("kickstart") %>

# echo 'network --bootproto=static --addvmportgroup=false --device=vmnic0 --ip=<%= @node_ip_address %> --netmask=<%= @ip_range_subnet %> --gateway=<%= @gateway %> --nameserver=<%= @nameserver %> --hostname=<%= node.metadata['hostname'] || node.hostname %>' > /tmp/networkconfig



%firstboot --interpreter=busybox
# set the hostname correctly before we do anythig else
esxcli system hostname set --fqdn <%= node.metadata['hostname'] || node.hostname %>

# enable HV (Hardware Virtualization to run nested 64bit Guests + Hyper-V VM)
grep -i 'vhv.allow' /etc/vmware/config || echo 'vhv.allow = 'TRUE'' >> /etc/vmware/config

# enable SSH support
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

# enable & start ESXi Shell (TSM)
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

# rename local datastore to something more meaningful
vim-cmd hostsvc/datastore/rename datastore1 "$(hostname -s)-local-storage-1"

# assign license
# vim-cmd vimsvc/license --set <%= @esx_license %>


# change the individual syslog rotation count
esxcli system syslog config logger set --id=hostd --rotate=20 --size=2048
esxcli system syslog config logger set --id=vmkernel --rotate=20 --size=2048
esxcli system syslog config logger set --id=fdm --rotate=20
esxcli system syslog config logger set --id=vpxa --rotate=20

### NTP CONFIGURATIONS ###
# cat > /etc/ntp.conf << __NTP_CONFIG__
# restrict default kod nomodify notrap noquerynopeer
# restrict 127.0.0.1
# server <%= @ntpserver %>
# __NTP_CONFIG__
# /sbin/chkconfig --level 345 ntpd on

### FIREWALL CONFIGURATION ###

echo "ITxhcmNoPgpkZXNjcmlwdG9yLnhtbCAgMCAgICAgICAgICAgMCAgICAgMCAgICAg
MCAgICAgICAxMDgxICAgICAgYAo8dmliIHZlcnNpb249IjUuMCI+PHR5cGU+Ym9v
dGJhbms8L3R5cGU+PG5hbWU+cmF6b3I8L25hbWU+PHZlcnNpb24+NS4wLjAtMC4w
LjE8L3ZlcnNpb24+PHZlbmRvcj5QdXBwZXQ8L3ZlbmRvcj48c3VtbWFyeT5bRmxp
bmddIEN1c3RvbSBWSUIgZm9yIFJhem9yPC9zdW1tYXJ5PjxkZXNjcmlwdGlvbj5B
ZGRzIGN1c3RvbSBmaXJld2FsbCBydWxlIGZvciBSYXpvcjwvZGVzY3JpcHRpb24+
PHJlbGVhc2UtZGF0ZT4yMDE2LTA5LTExVDIzOjU4OjI2LjI4MDI2MyswMDowMDwv
cmVsZWFzZS1kYXRlPjx1cmxzLz48cmVsYXRpb25zaGlwcz48ZGVwZW5kcy8+PGNv
bmZsaWN0cy8+PHJlcGxhY2VzLz48cHJvdmlkZXMvPjxjb21wYXRpYmxlV2l0aC8+
PC9yZWxhdGlvbnNoaXBzPjxzb2Z0d2FyZS10YWdzLz48c3lzdGVtLXJlcXVpcmVz
PjxtYWludGVuYW5jZS1tb2RlPmZhbHNlPC9tYWludGVuYW5jZS1tb2RlPjwvc3lz
dGVtLXJlcXVpcmVzPjxmaWxlLWxpc3Q+PGZpbGU+ZXRjL3Ztd2FyZS9maXJld2Fs
bC9yYXpvci54bWw8L2ZpbGU+PC9maWxlLWxpc3Q+PGFjY2VwdGFuY2UtbGV2ZWw+
Y29tbXVuaXR5PC9hY2NlcHRhbmNlLWxldmVsPjxsaXZlLWluc3RhbGwtYWxsb3dl
ZD50cnVlPC9saXZlLWluc3RhbGwtYWxsb3dlZD48bGl2ZS1yZW1vdmUtYWxsb3dl
ZD50cnVlPC9saXZlLXJlbW92ZS1hbGxvd2VkPjxjaW1vbS1yZXN0YXJ0PmZhbHNl
PC9jaW1vbS1yZXN0YXJ0PjxzdGF0ZWxlc3MtcmVhZHk+dHJ1ZTwvc3RhdGVsZXNz
LXJlYWR5PjxvdmVybGF5PmZhbHNlPC9vdmVybGF5PjxwYXlsb2Fkcz48cGF5bG9h
ZCBuYW1lPSJ2aWJwYXlsb2FkIiB0eXBlPSJ2Z3oiIHNpemU9IjM0NiI+PGNoZWNr
c3VtIGNoZWNrc3VtLXR5cGU9InNoYS0yNTYiPmNiNjU1NGExYWJkMjk3NWQ0MjYw
OGY0NDBiMmU4ZWIxYjkxMDNjMTI0ZmM3ZjU4ZmQzODliNjM4MDY2NjM5YmQ8L2No
ZWNrc3VtPjxjaGVja3N1bSBjaGVja3N1bS10eXBlPSJzaGEtMSIgdmVyaWZ5LXBy
b2Nlc3M9Imd1bnppcCI+YjY5NmY2ZDNiYzA0MjJhNGVjYjY5OWQ2ZjBjODdkMTA1
YzAwODdkYzwvY2hlY2tzdW0+PC9wYXlsb2FkPjwvcGF5bG9hZHM+PC92aWI+CnNp
Zy5wa2NzNyAgICAgICAwICAgICAgICAgICAwICAgICAwICAgICAwICAgICAgIDAg
ICAgICAgICBgCnZpYnBheWxvYWQgICAgICAwICAgICAgICAgICAwICAgICAwICAg
ICAwICAgICAgIDM0NiAgICAgICBgCh+LCAii79VXAAN2aWJwYXlsb2FkLnRhci52
dGFyAO1UzW6DMAzmzFPkxm0JP4Ee0lz2BnsDSsIUKSUsBLrt6WdYYVW1daoE3abx
XWJ/tmQ7n2XpCuwtDALIKB1ewPk72GGUpTROszALPRKSmEYeoks31qNTjbEIedYY
dynvu/gfhQT9u/0ht3K5Nbhe/xDsVf9b4ET/Ull5yLWefRGu1z9OUrLqfwt8pr/N
X429e97rmWr0AqdJ8qX+SUTP9KfD/Scz1b+I/6a//9MNrPhNYPemKtXjA2w3932E
WCNtpwqJlNgGhGxIwIEFXgk+3AWGwXqnbKvHPDLmAS3gjhROmYqb1u1MWwmGP7gx
q7bGmcJo7oqa4cmbwsY65F5quQ1E4wK+CSmBNGCPxXFffbCZrPKdloI720qGR28I
WfnUQmnBy1w3EJz8flR8nBUGZ/j0H94AagRafhULAAA=" | openssl base64 -d > /tmp/razor.vib

esxcli software vib install -v /tmp/razor.vib -f

# enable firewall
esxcli network firewall set --default-action false --enabled yes

# services to enable by default
FIREWALL_SERVICES='syslog sshClient ntpClient updateManager httpClient netdump'
for SERVICE in ${FIREWALL_SERVICES}; do
    esxcli network firewall ruleset set --ruleset-id ${SERVICE} --enabled yes
done

wget <%= file_url("/stage/razor.vib") %> /tmp/razor.vib
esxcli software vib install -v /tmp/razor/vib -f

echo "<ConfigRoot>

  <service id='0080'>
    <id>razor</id>
    <rule id='0000'>
      <direction>outbound</direction>
      <protocol>tcp</protocol>
      <port type='dst'>8150</port>
    </rule>
   <enabled>true</enabled>
   <required>false</required>
  </service>

</ConfigRoot>" > /etc/vmware/firewall/razor.xml
chmod 444 /etc/vmware/firewall/razor.xml
esxcli network firewall refresh

# backup ESXi configuration to persist changes
/sbin/auto-backup.sh

# enter maintenance mode
vim-cmd hostsvc/maintenance_mode_enter

# copy %first boot script logs to persisted datastore
cp /var/log/hostd.log "/vmfs/volumes/$(hostname -s)-local-storage-1/firstboot-hostd.log"
cp /var/log/esxi_install.log "/vmfs/volumes/$(hostname -s)-local-storage-1/firstboot-esxi_install.log"
wget <%= stage_done_url("finished") %>
#reboot

%firstboot --interpreter=python

# Author: Chris Matteson - Puppet Labs
# Credit: This script is a minor modification of a python script
# written by William Lam of www.virtuallyghetto.com

import sys,re,os,urllib,urllib2,base64,syslog,socket

# vCenter server
vcenter_server = "tse-vc1-prod.corp.puppetlabs.net"
 
# vCenter Cluster path
cluster = "west1/host/Test"
 
# vCenter credentials using encoded base64 password
vc_username = "tseadmin@vsphere.local"
vc_password = "not the real password"
 
# ESX(i) credentials using encoded base64 password
host_username = "root"
host_password = "puppet"
 
# vCenter mob URL for findByInventoryPath
url = "https://" + vcenter_server + "/mob/?moid=SearchIndex&method=findByInventoryPath"
 
# Create global variables
global passman,authhandler,opener,req,page,page_content,nonce,headers,cookie,params,e_params,syslogGhetto,clusterMoRef
 
# syslog key for eaiser troubleshooting
syslogGhetto = 'GHETTO-JOIN-VC'
 
syslog.syslog(syslogGhetto + ' Starting joinvCenter process - ' + url)
 
# Code to build opener with HTTP Basic Authentication
try:
        passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
        passman.add_password(None,url,vc_username,vc_password)
        authhandler = urllib2.HTTPBasicAuthHandler(passman)
        opener = urllib2.build_opener(authhandler)
        urllib2.install_opener(opener)
except IOError, e:
        opener.close()
        syslog.syslog(syslogGhetto + ' Failed HTTP Basic Authentication!')
        sys.exit(1)
else:
        syslog.syslog(syslogGhetto + ' Succesfully built HTTP Basic Authentication')
 
# Code to capture required page data and cookie required for post back to meet CSRF requirements
# Thanks to user klich - http://communities.vmware.com/message/1722582#1722582
try:
        req = urllib2.Request(url)
        page = urllib2.urlopen(req)
        page_content= page.read()
except IOError, e:
        opener.close()
        syslog.syslog(syslogGhetto + ' Failed to retrieve MOB data -> ' + str(e.args))
        sys.exit(1)
else:
        syslog.syslog(syslogGhetto + ' Succesfully requested MOB data')
 
# regex to get the vmware-session-nonce value from the hidden form entry
reg = re.compile('name="vmware-session-nonce" type="hidden" value="?([^\s^"]+)"')
nonce = reg.search(page_content).group(1)
 
# get the page headers to capture the cookie
headers = page.info()
cookie = headers.get("Set-Cookie")
 
# Code to search for vCenter Cluster
params = {'vmware-session-nonce':nonce,'inventoryPath':cluster}
e_params = urllib.urlencode(params)
req = urllib2.Request(url, e_params, headers={"Cookie":cookie})
page = urllib2.urlopen(req).read()
 
clusterMoRef = re.search('domain-c[0-9]*',page)
if clusterMoRef:
        syslog.syslog(syslogGhetto + ' Succesfully located cluster "' + cluster + '"!')
else:
        opener.close()
        syslog.syslog(syslogGhetto + ' Failed to find cluster "' + cluster + '"!')
        sys.exit(1)
 
# Code to compute SHA1 hash
cmd = "openssl x509 -sha1 -in /etc/vmware/ssl/rui.crt -noout -fingerprint"
tmp = os.popen(cmd)
tmp_sha1 = tmp.readline()
tmp.close()
s1 = re.split('=',tmp_sha1)
s2 = s1[1]
s3 = re.split('\n', s2)
sha1 = s3[0]
 
if sha1:
        syslog.syslog(syslogGhetto + ' Succesfully computed SHA1 hash: "' + sha1 + '"!')
else:
        opener.close()
        syslog.syslog(syslogGhetto + ' Failed to compute SHA1 hash!')
        sys.exit(1)
 
# Code to create ConnectHostSpec
xml = '<spec xsi:type="HostConnectSpec"><hostName>%hostname</hostName><sslThumbprint>%sha</sslThumbprint><userName>%user</userName><password>%pass</password><force>1</force></spec>'
 
# Code to extract IP Address to perform DNS lookup to add FQDN to vCenter
hostip = socket.gethostbyname(socket.gethostname())
 
if hostip:
        syslog.syslog(syslogGhetto + ' Successfully extracted IP Address ' + hostip.strip())
else:
        opener.close()
        syslog.syslog(syslogGhetto + ' Failed to extract IP Address!')
        sys.exit(1)
 
try:
        host = socket.getnameinfo((hostip, 0), 0)[0]
except IOError, e:
        syslog.syslog(syslogGhetto + ' Failed to perform DNS lookup for ' + hostipt.strip())
        sys.exit(1)
else:
        syslog.syslog(syslogGhetto + ' Successfully performed DNS lookup for ' + hostip.strip() + ' is ' + host)
 
xml = xml.replace("%hostname",hostip)
xml = xml.replace("%sha",sha1)
xml = xml.replace("%user",host_username)
xml = xml.replace("%pass",host_password)
 
# Code to join host to vCenter Cluster
try:
        url = "https://" + vcenter_server + "/mob/?moid=" + clusterMoRef.group() + "&method=addHost"
        params = {'vmware-session-nonce':nonce,'spec':xml,'asConnected':'1','resourcePool':'','license':''}
	syslog.syslog(syslogGhetto + ' ' + url)
        e_params = urllib.urlencode(params)
        req = urllib2.Request(url, e_params, headers={"Cookie":cookie})
        page = urllib2.urlopen(req).read()
except IOError, e:
        opener.close()
        syslog.syslog(syslogGhetto + ' Failed to join vCenter!')
        syslog.syslog(syslogGhetto + ' HOSTNAME: ' + host)
        syslog.syslog(syslogGhetto + ' USERNAME: ' + host_username)
        #syslog.syslog(syslogGhetto + ' PASSWORD: ' + host_password)
        sys.exit(1)
else:
        syslog.syslog(syslogGhetto + ' Succesfully joined vCenter!')
        syslog.syslog(syslogGhetto + ' Logging off vCenter')
        url = "https://" + vcenter_server + "/mob/?moid=SessionManager&method=logout"
        params = {'vmware-session-nonce':nonce}
        e_params = urllib.urlencode(params)
        req = urllib2.Request(url, e_params, headers={"Cookie":cookie})
        page = urllib2.urlopen(req).read()
        sys.exit(0)
